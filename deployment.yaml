---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: serverless-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: serverless-redis
  template:
    metadata:
      labels:
        app: serverless-redis
    spec:
      containers:
      - name: serverless-redis
        image: lucasmsp/serverless:redis
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        volumeMounts:
        - name: pyfile
          mountPath: "/opt/usermodule.py"
          subPath: pyfile
        env:
        - name: REDIS_HOST
          value: "192.168.121.66"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_INPUT_KEY
          value: "metrics"
        - name: REDIS_OUTPUT_KEY
          valueFrom:
            configMapKeyRef:
              name: outputkey
              key: REDIS_OUTPUT_KEY
      volumes:
      - name: pyfile
        configMap:
          name: pyfile
---
apiVersion: v1
data:
  pyfile: |
    def handler(input: dict, context: object) -> dict[str, any]:
        response = {}
        if not ('cpus' in context.env):
            context.env['cpus'] = [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ]
        
        for i in range(0,16):
            if len(context.env['cpus'][i]) == 12:
                print("cpu {}: Already have 12 percentages".format(str(i)))
                context.env['cpus'][i].pop(0)
                context.env['cpus'][i].append(input['cpu_percent-' + str(i)])
                print("cpu {}: Removed first percentage and appended current percentage to list".format(str(i)))
            else:
                print("cpu {}: Still does not have 12 percentages".format(str(i)))
                context.env['cpus'][i].append(input['cpu_percent-' + str(i)])
                print("cpu {}: Added new percentage to list. Moving Average will be calculated with the currently stored percentages".format(str(i)))
            
            response["cpu-" + str(i)] = sum(context.env['cpus'][i]) / len(context.env['cpus'][i])
            print("cpu {}: Moving Average calculated, result is: {}".format(str(i), str(response["cpu-" + str(i)])))

        response['traffic'] = input['net_io_counters_eth0-bytes_sent'] / (input['net_io_counters_eth0-bytes_sent'] + input['net_io_counters_eth0-bytes_recv'])
        response['memory'] = (input['virtual_memory-cached'] + input['virtual_memory-buffers']) / input['virtual_memory-total']
        print(response)
        return response
kind: ConfigMap
metadata:
  name: pyfile
---
apiVersion: v1
data:
  REDIS_OUTPUT_KEY: vitorferreira-proj3-output
kind: ConfigMap
metadata:
  name: outputkey
    